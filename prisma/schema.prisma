generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PolicyPlanStatus {
  idPolicyPlanStatus   Int          @id @default(autoincrement())
  policyPlanStatusType String       @db.VarChar(15)
  PolicyPlan           PolicyPlan[]
}

model Service {
  idService    Int        @id @default(autoincrement())
  name         String     @db.VarChar(100)
  isCovered    Boolean
  coveredCost  Decimal    @db.Decimal(10, 2)
  idPolicyPlan String
  PolicyPlan   PolicyPlan @relation(fields: [idPolicyPlan], references: [idPolicyPlan])
}

model PolicyPlan {
  idPolicyPlan       String           @id @default(uuid())
  title              String           @db.VarChar(30)
  description        String           @db.VarChar(255)
  maxPeriod          Int
  basePrice          Decimal          @db.Decimal(10, 2)
  idPolicyPlanStatus Int
  Policy             Policy[]
  PolicyPlanStatus   PolicyPlanStatus @relation(fields: [idPolicyPlanStatus], references: [idPolicyPlanStatus])
  Service            Service[]
}

model Brand {
  idBrand Int     @id @default(autoincrement())
  name    String  @db.VarChar(100)
  Model   Model[]
}

model Model {
  idModel        Int              @id @default(autoincrement())
  year           String           @db.VarChar(4)
  idBrand        Int
  Brand          Brand            @relation(fields: [idBrand], references: [idBrand])
  Vehicle        Vehicle[]
  ImplicateParty ImplicateParty[]
}

model Color {
  idColor        Int              @id @default(autoincrement())
  vehicleColor   String           @db.VarChar(40)
  Vehicle        Vehicle[]
  ImplicateParty ImplicateParty[]
}

model Type {
  idType      Int       @id @default(autoincrement())
  vehicleType String    @db.VarChar(50)
  Vehicle     Vehicle[]
}

model ServiceVehicle {
  idService Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  Vehicle   Vehicle[]
}

model Vehicle {
  plates              String         @id @db.VarChar(15)
  serialNumberVehicle String         @db.VarChar(15)
  occupants           Int
  idService           Int
  idType              Int
  idModel             Int
  idColor             Int
  Policy              Policy[]
  Report              Report[]
  Color               Color          @relation(fields: [idColor], references: [idColor])
  Model               Model          @relation(fields: [idModel], references: [idModel])
  ServiceVehicle      ServiceVehicle @relation(fields: [idService], references: [idService])
  Type                Type           @relation(fields: [idType], references: [idType])
}

model PolicyService {
  idPolicyService Int     @id @default(autoincrement())
  name            String  @db.VarChar(100)
  isCovered       Boolean
  coveredCost     Decimal @db.Decimal(10, 2)
  serialNumber    String
  Policy          Policy  @relation(fields: [serialNumber], references: [serialNumber])
}

model Policy {
  serialNumber    String          @id @default(uuid())
  monthsOfPayment Int
  yearsPolicy     Int
  isCanceled      Boolean
  coveredCost     Decimal         @db.Decimal(10, 2)
  startDate       DateTime
  planTitle       String          @db.VarChar(30)
  planDescription String          @db.VarChar(255)
  idPolicyPlan    String
  plates          String
  idUser          Int
  PolicyPlan      PolicyPlan      @relation(fields: [idPolicyPlan], references: [idPolicyPlan])
  Driver          Driver          @relation(fields: [idUser], references: [idUser])
  Vehicle         Vehicle         @relation(fields: [plates], references: [plates])
  PolicyService   PolicyService[]
}

model Driver {
  rfc                       String   @db.VarChar(14)
  bankAccountNumber         String   @db.VarChar(100)
  expirationDateBankAccount DateTime
  licenseNumber             String   @db.VarChar(100)
  phone                     String   @db.VarChar(10)
  idUser                    Int      @id @default(autoincrement())
  Account                   Account?
  Policy                    Policy[]
  Report                    Report[]
}

model Account {
  idAccount        Int          @id @default(autoincrement())
  name             String       @db.VarChar(50)
  lastName         String       @db.VarChar(50)
  datebirth        DateTime
  email            String       @db.VarChar(255)
  password         String       @db.VarChar(64)
  registrationDate DateTime
  postalCode       String       @db.VarChar(10)
  address          String       @db.VarChar(100)
  idUser           Int?         @unique
  idEmployee       Int?
  idMunicipality   Int
  Municipality     Municipality @relation(fields: [idMunicipality], references: [idMunicipality])
  Driver           Driver?      @relation(fields: [idUser], references: [idUser])
  Employee         Employee?
}

model Municipality {
  idMunicipality   Int       @id @default(autoincrement())
  municipalityName String    @db.VarChar(100)
  idState          Int
  Accounts         Account[]
  State            State     @relation(fields: [idState], references: [idState])
}

model State {
  idState        Int            @id @default(autoincrement())
  stateName      String         @db.VarChar(100)
  Municipalities Municipality[]
}

model Report {
  idReport           Int               @id @default(autoincrement())
  description        String            @db.Text
  date               DateTime
  latitude           Decimal           @db.Decimal(9, 6)
  longitude          Decimal           @db.Decimal(10, 6)
  result             String?            @db.Text
  reportDecisionDate DateTime?
  idStatus           Int
  plates             String            @db.VarChar(15)
  Vehicle            Vehicle           @relation(fields: [plates], references: [plates])
  ImplicateParties   ImplicateParty[]
  Photographs        Photograph[]
  Status             Status            @relation(fields: [idStatus], references: [idStatus])
  Driver             Driver[]
  Employee           Employee[]
}

model Employee {
  idEmployee     Int          @id @default(autoincrement())
  employeeNumber Int
  idEmployeeType Int
  EmployeeType   EmployeeType @relation(fields: [idEmployeeType], references: [idEmployeeType])
  Account        Account      @relation(fields: [idEmployee], references: [idAccount])
  Reports        Report[]
}

model EmployeeType {
  idEmployeeType Int        @id @default(autoincrement())
  employeeType   String     @db.VarChar(50)
  Employees      Employee[]
}

model ImplicateParty {
  idImplicateParty Int     @id @default(autoincrement())
  name             String? @db.VarChar(50)
  idModel          Int?
  Model            Model?  @relation(fields: [idModel], references: [idModel])
  idReport         Int
  Report           Report  @relation(fields: [idReport], references: [idReport])
  idColor          Int?
  Color            Color?  @relation(fields: [idColor], references: [idColor])
}

model Status {
  idStatus   Int      @id @default(autoincrement())
  statusType String   @db.VarChar(15)
  Reports    Report[]
}

model Photograph {
  idPhotograph Int    @id @default(autoincrement())
  name         String @db.VarChar(255)
  url          String @db.VarChar(255)
  idReport     Int
  Report       Report @relation(fields: [idReport], references: [idReport])
}
